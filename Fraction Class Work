	public static Fraction plus(Fraction input1, Fraction input2) {
		int numSum = input1.getNum() + input2.getNum();
		int denomSum = input1.getDenom() + input2.getDenom();
		Fraction sum = new Fraction(numSum, denomSum);
		return sum;
	}

	/**
	 * A method that determines the greatest common factor between a numerator and denominator of
	 * a fraction
	 * @param input1
	 * @return gdc the greatest common factor between the numerator and denominator of a fraction
	 */
	public static int GDC(Fraction input1) {
		int gdc = 1;

		for (int i = 1; i < Math.min(input1.getNum(), input1.getDenom()); i++) {
			if ((input1.getNum()%i==0)&&(input1.getDenom()%i==0)) {
				gdc = i;
			}
		}
		return gdc;
	}
	
	/**
	 * A method that reduces a fraction to its simplest form
	 * @param input1
	 * @return Fraction the newly simplified fraction
	 */
	public static Fraction simplify(Fraction input1) {
		int newNum = input1.getNum()/GDC(input1);
		int newDenom = input1.getDenom()/GDC(input1);
		return new Fraction(newNum, newDenom);
	}
