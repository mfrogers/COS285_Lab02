	/**
	 * A method to add two fractions
	 * @param input1 the first fraction
	 * @param input2 the second fraction
	 * @return sum the sum of the two fractions
	 */
	public static Fraction plus(Fraction input1, Fraction input2) {
		int numSum = input1.getNum() + input2.getNum();
		int denomSum = input1.getDenom() + input2.getDenom();
		Fraction sum = new Fraction(numSum, denomSum);
		return sum;
	}
	
	/**
	 * A method to subtract two fractions
	 * @param fracA the first fraction
	 * @param fracB the second fraction
	 * @return newFrac the new fraction from subtracting the two fractions
	 */
	public static Fraction minus(Fraction fracA, Fraction fracB) {
		Fraction denoms = new Fraction(fracA.getDenom(), fracB.getDenom());
		GDC(denoms);
		Fraction newA = new Fraction((fracA.getNum()*GDC(denoms)), fracA.getDenom()*GDC(denoms));
		Fraction newB = new Fraction((fracB.getNum()*GDC(denoms)), fracB.getDenom()*GDC(denoms));
		
		int newNum = Math.abs(newA.getNum()-newB.getNum());
		int newDenom = GDC(denoms);
		Fraction newFrac = new Fraction(newNum, newDenom);
		return newFrac;
	}
	/**
	 * A method that determines the greatest common factor between a numerator and denominator of
	 * a fraction
	 * @param input1
	 * @return gdc the greatest common factor between the numerator and denominator of a fraction
	 */
	public static int GDC(Fraction input1) {
		int gdc = 1;

		for (int i = 1; i < Math.min(input1.getNum(), input1.getDenom()); i++) {
			if ((input1.getNum()%i==0)&&(input1.getDenom()%i==0)) {
				gdc = i;
			}
		}
		return gdc;
	}
	
	/**
	 * A method that reduces a fraction to its simplest form
	 * @param input1
	 * @return Fraction the newly simplified fraction
	 */
	public static Fraction simplify(Fraction input1) {
		int newNum = input1.getNum()/GDC(input1);
		int newDenom = input1.getDenom()/GDC(input1);
		return new Fraction(newNum, newDenom);
	}

	/**
	 * A method to convert a fraction to a percent
	 * @param input1 the fraction to be converted to a percent
	 * @return percentage the percent version of the fraction
	 */
	public static double percent(Fraction input1) {
		double num = input1.getNum();
		double denom = input1.getDenom();
		double percentage = (num/denom)*100;
		
		return percentage;
	}
	
	
	/**
	 * A method to sort an array of Fractions by using the method insert
	 * @param input the Fraction array to be sorted
	 */
	public static <Fraction extends Comparable<Fraction>> void sort(Fraction[] input) {
		for (int i = 1; i < input.length; i++) {
			insert(input, i);
		}
	}

	/**
	 * A method to insert a piece of the Fraction array to the correct spot
	 * @param input the Fraction array that is being sorted
	 * @param i the location of the fraction in the array
	 */
	public static <Fraction extends Comparable<Fraction>> void insert(Fraction[] input, int i) {
		Fraction nextValue = input[i];
		while (i > 0 && nextValue.compareTo(input[i-1])<0) {
			input[i]=input[i-1];
			i--;
		}
		input[i] = nextValue;
	}
